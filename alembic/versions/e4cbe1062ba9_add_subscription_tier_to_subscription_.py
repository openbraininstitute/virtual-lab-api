"""add subscription tier to subscription model

Revision ID: e4cbe1062ba9
Revises: cb69e5f593db
Create Date: 2025-03-24 12:09:07.655420

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e4cbe1062ba9"
down_revision: Union[str, None] = "cb69e5f593db"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # Check if enum type exists
    result = connection.execute(
        text(
            """
        SELECT EXISTS (
            SELECT 1 FROM pg_type WHERE typname = 'subscriptiontierenum'
        );
    """
        )
    )
    enum_exists = result.scalar()

    if not enum_exists:
        subscriptiontierenum = sa.Enum(
            "FREE", "PRO", "PREMIUM", name="subscriptiontierenum"
        )
        subscriptiontierenum.create(op.get_bind())  # type: ignore[no-untyped-call]

    # Check if tier column exists and its type
    result = connection.execute(
        text(
            """
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'subscription_tier' 
            AND column_name = 'tier'
        );
    """
        )
    )
    tier_column_exists = result.scalar()

    if not tier_column_exists:
        op.add_column(
            "subscription_tier", sa.Column("tier", subscriptiontierenum, nullable=False)
        )
        op.create_index(
            op.f("ix_subscription_tier_tier"),
            "subscription_tier",
            ["tier"],
            unique=False,
        )
    else:
        # Check if the column type is correct
        result = connection.execute(
            text(
                """
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'subscription_tier' 
            AND column_name = 'tier';
        """
            )
        )
        current_type = result.scalar()

        if current_type != "subscriptiontierenum":
            # Alter the column type if it's not the correct enum type
            connection.execute(
                text(
                    """
                ALTER TABLE subscription_tier 
                ALTER COLUMN tier TYPE subscriptiontierenum 
                USING tier::text::subscriptiontierenum;
            """
                )
            )

    # Drop old tables
    op.drop_index("ix_virtual_lab_topup_virtual_lab_id", table_name="virtual_lab_topup")
    op.drop_table("virtual_lab_topup")
    op.drop_index("ix_plan_name", table_name="plan")
    op.drop_table("plan")

    # Add tier_id column to subscription if it doesn't exist
    result = connection.execute(
        text(
            """
        SELECT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'subscription' AND column_name = 'tier_id'
        );
    """
        )
    )
    tier_id_column_exists = result.scalar()

    if not tier_id_column_exists:
        op.add_column("subscription", sa.Column("tier_id", sa.UUID(), nullable=True))
        op.create_foreign_key(
            "fk_subscription_tier_id",
            "subscription",
            "subscription_tier",
            ["tier_id"],
            ["id"],
        )

    # Update existing subscriptions with appropriate tier_id
    connection.execute(
        text(
            """
            UPDATE subscription s
            SET tier_id = st.id
            FROM subscription_tier st
            WHERE 
                (s.subscription_type = 'FREE' AND st.tier = 'FREE') OR
                (s.subscription_type = 'PRO' AND st.tier = 'PRO') OR
                (s.subscription_type = 'PREMIUM' AND st.tier = 'PREMIUM')
            """
        )
    )

    # Make tier_id non-nullable after migration
    op.alter_column("subscription", "tier_id", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_subscription_tier_id", "subscription", type_="foreignkey")
    op.drop_column("subscription", "tier_id")

    # Recreate old tables
    op.create_table(
        "plan",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "features",
            postgresql.JSON(astext_type=sa.Text()),  # type: ignore
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="plan_pkey"),
    )
    op.create_index("ix_plan_name", "plan", ["name"], unique=True)
    op.create_table(
        "virtual_lab_topup",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("virtual_lab_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("amount", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("stripe_event_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["virtual_lab_id"],
            ["virtual_lab.id"],
            name="virtual_lab_topup_virtual_lab_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="virtual_lab_topup_pkey"),
    )
    op.create_index(
        "ix_virtual_lab_topup_virtual_lab_id",
        "virtual_lab_topup",
        ["virtual_lab_id"],
        unique=False,
    )
    # Drop the enum type
    subscriptiontierenum = sa.Enum(name="subscriptiontierenum")
    subscriptiontierenum.drop(op.get_bind())  # type: ignore[no-untyped-call]

    op.drop_index(op.f("ix_subscription_tier_tier"), table_name="subscription_tier")
    op.drop_column("subscription_tier", "tier")
    # ### end Alembic commands ###
